-- File: ../vhdl/neural_network/wrapper.vhd
-- Generated by MyHDL 0.11
-- Date: Sun Jan  9 15:12:47 2022


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity wrapper is
    port (
        output: out std_logic_vector(9 downto 0);
        i1: in std_logic_vector(7 downto 0);
        i2: in std_logic_vector(7 downto 0);
        i3: in std_logic_vector(7 downto 0);
        i4: in std_logic_vector(7 downto 0);
        i5: in std_logic_vector(7 downto 0)
    );
end entity wrapper;


architecture MyHDL of wrapper is



signal output_num: unsigned(9 downto 0);
signal i1_num: unsigned(7 downto 0);
signal i2_num: unsigned(7 downto 0);
signal i3_num: unsigned(7 downto 0);
signal i4_num: unsigned(7 downto 0);
signal i5_num: unsigned(7 downto 0);
signal top_level0_adder0_c: unsigned(7 downto 0);
signal top_level0_adder1_c: unsigned(8 downto 0);
signal top_level0_adder2_c: unsigned(9 downto 0);
signal top_level0_adder3_c: unsigned(10 downto 0);

begin

output <= std_logic_vector(output_num);
i1_num <= unsigned(i1);
i2_num <= unsigned(i2);
i3_num <= unsigned(i3);
i4_num <= unsigned(i4);
i5_num <= unsigned(i5);




top_level0_adder0_c <= (i1_num + i2_num);


top_level0_adder1_c <= (resize(i3_num, 9) + top_level0_adder0_c);


top_level0_adder2_c <= (resize(i4_num, 10) + top_level0_adder1_c);


top_level0_adder3_c <= (resize(i5_num, 11) + top_level0_adder2_c);


output_num <= resize(i5_num + top_level0_adder3_c, 10);

end architecture MyHDL;
