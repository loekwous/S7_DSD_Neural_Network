-- File: ../vhdl/video_controller/character_writer.vhd
-- Generated by MyHDL 0.11
-- Date: Sun Jan  9 13:20:01 2022


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity character_writer is
    port (
        clk: in std_logic;
        en: in std_logic;
        max: out std_logic;
        x: out std_logic_vector(6 downto 0);
        y: out std_logic_vector(5 downto 0);
        pixel: out std_logic
    );
end entity character_writer;


architecture MyHDL of character_writer is



signal x_num: unsigned(6 downto 0);
signal x_counter: unsigned(5 downto 0);
signal y_num: unsigned(5 downto 0);
signal y_counter: unsigned(2 downto 0);
signal y_out: unsigned(7 downto 0);

begin

x <= std_logic_vector(x_num);
y <= std_logic_vector(y_num);




x_num <= resize(x_counter, 7);
y_num <= resize(y_counter, 6);
pixel <= y_out(to_integer(y_counter));

CHARACTER_WRITER_UPDATE_SIG_Y: process (x_counter) is
begin
    case to_integer(x_counter) is
        when 0 => y_out <= "01111000";
        when 1 => y_out <= "00000100";
        when 2 => y_out <= "00001000";
        when 3 => y_out <= "00010000";
        when 4 => y_out <= "00001000";
        when 5 => y_out <= "00000100";
        when 6 => y_out <= "01111000";
        when 7 => y_out <= "00000000";
        when 8 => y_out <= "00000000";
        when 9 => y_out <= "00000000";
        when 10 => y_out <= "00000000";
        when 11 => y_out <= "00000000";
        when 12 => y_out <= "00000000";
        when 13 => y_out <= "00000000";
        when 14 => y_out <= "00000000";
        when 15 => y_out <= "00000000";
        when 16 => y_out <= "00000000";
        when 17 => y_out <= "11111100";
        when 18 => y_out <= "11111110";
        when 19 => y_out <= "00010010";
        when 20 => y_out <= "00010010";
        when 21 => y_out <= "11111110";
        when 22 => y_out <= "11111100";
        when 23 => y_out <= "00000000";
        when 24 => y_out <= "00000000";
        when 25 => y_out <= "00000000";
        when 26 => y_out <= "00111110";
        when 27 => y_out <= "00000100";
        when 28 => y_out <= "00001000";
        when 29 => y_out <= "00010000";
        when 30 => y_out <= "00111110";
        when 31 => y_out <= "00000000";
        when 32 => y_out <= "00000000";
        when 33 => y_out <= "00000000";
        when 34 => y_out <= "01111110";
        when 35 => y_out <= "01000010";
        when 36 => y_out <= "01000010";
        when 37 => y_out <= "00100100";
        when 38 => y_out <= "00011000";
        when 39 => y_out <= "00000000";
        when 40 => y_out <= "00000000";
        when 41 => y_out <= "00000000";
        when 42 => y_out <= "00000000";
        when 43 => y_out <= "00000000";
        when 44 => y_out <= "00000000";
        when 45 => y_out <= "00000000";
        when 46 => y_out <= "00000000";
        when 47 => y_out <= "00000000";
        when 48 => y_out <= "00000000";
        when 49 => y_out <= "00000000";
        when 50 => y_out <= "01111110";
        when 51 => y_out <= "01000000";
        when 52 => y_out <= "01000000";
        when 53 => y_out <= "01000000";
        when 54 => y_out <= "00000000";
        when others => y_out <= "00000000";
    end case;
end process CHARACTER_WRITER_UPDATE_SIG_Y;

CHARACTER_WRITER_UPDATE_MAX: process (x_counter) is
begin
    if (signed(resize(x_counter, 7)) = (56 - 1)) then
        max <= '1';
    else
        max <= '0';
    end if;
end process CHARACTER_WRITER_UPDATE_MAX;

CHARACTER_WRITER_UPDATE_OUTPUT: process (clk) is
begin
    if rising_edge(clk) then
        if (en = '1') then
            if (signed(resize(y_counter, 4)) < (8 - 1)) then
                y_counter <= (y_counter + 1);
            else
                y_counter <= to_unsigned(0, 3);
                if (signed(resize(x_counter, 7)) < (56 - 1)) then
                    x_counter <= (x_counter + 1);
                else
                    x_counter <= to_unsigned(0, 6);
                end if;
            end if;
        else
            x_counter <= to_unsigned(0, 6);
            y_counter <= to_unsigned(0, 3);
        end if;
    end if;
end process CHARACTER_WRITER_UPDATE_OUTPUT;

end architecture MyHDL;
